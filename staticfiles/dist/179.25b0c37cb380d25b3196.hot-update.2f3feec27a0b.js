self.webpackHotUpdatecompare_spotify(179,{5268:(e,t,n)=>{"use strict";var r=n(7294),o=n(3935),s=n(9669),a=n.n(s),l=n(4184),c=n.n(l),i=n(5893);const u=r.createContext({prefixes:{}}),{Consumer:f,Provider:d}=u;function p(e,t){const{prefixes:n}=(0,r.useContext)(u);return e||n[t]||t}const m=function(...e){return e.filter((e=>null!=e)).reduce(((e,t)=>{if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(...n){e.apply(this,n),t.apply(this,n)}}),null)};function y(e){return!e||"#"===e.trim()}const h=r.forwardRef((({as:e="a",disabled:t,onKeyDown:n,...r},o)=>{const s=e=>{const{href:n,onClick:o}=r;(t||y(n))&&e.preventDefault(),t?e.stopPropagation():null==o||o(e)};return y(r.href)&&(r.role=r.role||"button",r.href=r.href||"#"),t&&(r.tabIndex=-1,r["aria-disabled"]=!0),(0,i.jsx)(e,{ref:o,...r,onClick:s,onKeyDown:m((e=>{" "===e.key&&(e.preventDefault(),s(e))}),n)})}));h.displayName="SafeAnchor";const v=h,b=r.forwardRef((({bsPrefix:e,variant:t,size:n,active:r,className:o,type:s,as:a,...l},u)=>{const f=p(e,"btn"),d=c()(o,f,r&&"active",t&&`${f}-${t}`,n&&`${f}-${n}`);if(l.href)return(0,i.jsx)(v,{...l,as:a,ref:u,className:c()(d,l.disabled&&"disabled")});s||a||(s="button");const m=a||"button";return(0,i.jsx)(m,{...l,ref:u,type:s,className:d})}));b.displayName="Button",b.defaultProps={variant:"primary",active:!1,disabled:!1};const x=b,$=r.forwardRef((({bsPrefix:e,fluid:t,as:n="div",className:r,...o},s)=>{const a=p(e,"container"),l="string"==typeof t?`-${t}`:"-fluid";return(0,i.jsx)(n,{ref:s,...o,className:c()(r,t?`${a}${l}`:a)})}));$.displayName="Container",$.defaultProps={fluid:!1};const g=$,w=["xxl","xl","lg","md","sm","xs"],E=r.forwardRef((({bsPrefix:e,className:t,as:n="div",...r},o)=>{const s=p(e,"row"),a=`${s}-cols`,l=[];return w.forEach((e=>{const t=r[e];let n;delete r[e],null!=t&&"object"==typeof t?({cols:n}=t):n=t;const o="xs"!==e?`-${e}`:"";null!=n&&l.push(`${a}${o}-${n}`)})),(0,i.jsx)(n,{ref:o,...r,className:c()(t,s,...l)})}));E.displayName="Row";const N=E,j=["xxl","xl","lg","md","sm","xs"],C=r.forwardRef((({bsPrefix:e,className:t,as:n="div",...r},o)=>{const s=p(e,"col"),a=[],l=[];return j.forEach((e=>{const t=r[e];let n,o,c;delete r[e],"object"==typeof t&&null!=t?({span:n=!0,offset:o,order:c}=t):n=t;const i="xs"!==e?`-${e}`:"";n&&a.push(!0===n?`${s}${i}`:`${s}${i}-${n}`),null!=c&&l.push(`order${i}-${c}`),null!=o&&l.push(`offset${i}-${o}`)})),a.length||a.push(s),(0,i.jsx)(n,{...r,ref:o,className:c()(t,...a,...l)})}));C.displayName="Col";const A=C;function P(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var S=0;const I=function(){(0,r.useEffect)((function(){}));var e,t,n=(e=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,s=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(s.push(r.value),!t||s.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return P(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?P(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],s=n[1];return r.createElement(g,null,r.createElement("div",null,r.createElement(N,null,r.createElement(A,null,r.createElement(x,{onClick:function(){a().get("/app/",{params:{count:S}}).then((function(e){console.log(e.data),s(e.data.text)})).catch((function(e){e.response?(console.log(e.response.data),console.log(e.response.status),console.log(e.response.headers)):e.request?console.log(e.request):console.log("Error",e.message)})),S++},variant:"primary"},"button")),r.createElement(A,null,r.createElement("p",{class:"text-center"},o)))))};n(5373),n(9079),o.render(r.createElement(I,null),document.getElementById("react-app"))},5373:(e,t,n)=>{"use strict";var r=n(4783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)},9079:(e,t,n)=>{"use strict";var r=n(4783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)}},(function(e){"use strict";e.h=()=>"e141853f22934d564be6"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,